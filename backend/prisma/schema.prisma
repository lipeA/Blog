// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  reader
  admin
}
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(reader) //Define o papel do usu√°rio.
 post      Post[]
 comment   Comment[]
 likes     Like[] 
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  
  @@map("users")
}
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  imgUrl    String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  
  @@map("posts")
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  
  @@map("comments")
}
model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  
  @@map("likes")
}
